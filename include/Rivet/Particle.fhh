// -*- C++ -*-
#ifndef RIVET_Particle_FHH
#define RIVET_Particle_FHH

#include "Rivet/Tools/RivetSTL.hh"
#include "Rivet/Math/Vectors.hh"

namespace Rivet {


  /// @name Particle declarations
  //@{

  // Forward declaration
  class Particle;

  // DISABLED UNTIL VANILLA CC7 COMPATIBILITY NOT NEEDED
  // /// Typedefs for a vector of Particle objects.
  // class Particles : public std::vector<Particle> {
  // public:
  //   using base = std::vector<Particle>; //< using-declarations don't like template syntax
  //   using base::base; //< import base-class constructors
  //   /// Copy constructor from vector<Particle>
  //   Particles(const std::vector<Particle>& vps);
  //   operator FourMomenta () const; //< implementation in Particle.cc
  //   /// @todo Add conversion to PseudoJets?
  // };
  // Particles operator + (const Particles& a, const Particles& b);
  typedef std::vector<Particle> Particles;

  /// @deprecated Old name: use Particles instead. Will be removed
  typedef Particles ParticleVector;

  /// Typedef for a pair of Particle objects.
  typedef std::pair<Particle, Particle> ParticlePair;

  //@}


  /// @name Particle function/functor declarations
  //@{

  /// std::function instantiation for functors taking a Particle and returning a bool
  using ParticleSelector = function<bool(const Particle&)>;

  /// std::function instantiation for functors taking two Particles and returning a bool
  using ParticleSorter = function<bool(const Particle&, const Particle&)>;

  //@}


  /// @name PdgId declarations
  //@{

  /// Typedefs for a PDG ID code.
  typedef int PdgId;
  //typedef PdgId PID; //< can't do this, because it's also a (sub)namespace

  /// Typedef for a pair of particle names.
  typedef std::pair<PdgId, PdgId> PdgIdPair;

  //@}


}

#endif
